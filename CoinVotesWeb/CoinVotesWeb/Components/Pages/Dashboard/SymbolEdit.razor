@page "/dashboard/symbols/edit/{Id:int}"
@using CoinVotesWeb.Components.Layout
@layout DashboardLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit Symbol - CoinInsight</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card bg-dark text-light">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Edit Symbol</h5>
                    <button class="btn btn-outline-light" @onclick="GoBack">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                </div>
                <div class="card-body">
                    <div id="loadingSpinner" class="text-center">
                        <div class="spinner-border text-light" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <form id="symbolEditForm" class="d-none">
                        <div class="mb-3">
                            <label for="symbolName" class="form-label">Symbol Name</label>
                            <input type="text" class="form-control bg-dark text-light" id="symbolName" required>
                        </div>
                        <div class="mb-3">
                            <label for="symbolUsdt" class="form-label">Symbol USDT</label>
                            <input type="text" class="form-control bg-dark text-light" id="symbolUsdt" required>
                        </div>
                        <div class="mb-3">
                            <label for="symbolCode" class="form-label">Code</label>
                            <input type="text" class="form-control bg-dark text-light" id="symbolCode" required>
                        </div>
                        <div class="mb-3">
                            <label for="symbolOrderNo" class="form-label">Order No</label>
                            <input type="number" class="form-control bg-dark text-light" id="symbolOrderNo" required>
                        </div>
                        <div class="mb-3">
                            <label for="symbolStatus" class="form-label">Status</label>
                            <select class="form-select bg-dark text-light" id="symbolStatus">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-outline-light" @onclick="GoBack">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    async function loadSymbolData() {
        try {
            const symbolId = window.location.pathname.split('/').pop();
            const response = await fetch(`/detail/${symbolId}`);
            
            if (!response.ok) {
                throw new Error('Failed to fetch symbol data');
            }

            const symbol = await response.json();
            
            // Populate form fields
            document.getElementById('symbolName').value = symbol.name || '';
            document.getElementById('symbolUsdt').value = symbol.symbolUsdt || '';
            document.getElementById('symbolCode').value = symbol.code || '';
            document.getElementById('symbolOrderNo').value = symbol.orderNo || '';
            document.getElementById('symbolStatus').value = symbol.isActive.toString();

            // Show form and hide spinner
            document.getElementById('loadingSpinner').classList.add('d-none');
            document.getElementById('symbolEditForm').classList.remove('d-none');

            // Add form submit handler
            document.getElementById('symbolEditForm').addEventListener('submit', handleSubmit);
        } catch (error) {
            console.error('Error loading symbol data:', error);
            alert('Failed to load symbol data. Please try again.');
        }
    }

    async function handleSubmit(event) {
        event.preventDefault();
        
        try {
            const symbolId = window.location.pathname.split('/').pop();
            const formData = {
                name: document.getElementById('symbolName').value,
                symbolUsdt: document.getElementById('symbolUsdt').value,
                code: document.getElementById('symbolCode').value,
                orderNo: document.getElementById('symbolOrderNo').value,
                isActive: document.getElementById('symbolStatus').value === 'true'
            };

            const response = await fetch(`/api/SymbolsApi/${symbolId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            if (!response.ok) {
                throw new Error('Failed to update symbol');
            }

            alert('Symbol updated successfully');
            window.location.href = '/dashboard/symbols';
        } catch (error) {
            console.error('Error updating symbol:', error);
            alert('Failed to update symbol. Please try again.');
        }
    }

    window.loadSymbols = loadSymbolData;
</script>

@code {
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadSymbolData");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/dashboard/symbols");
    }
} 