@page "/dashboard/devices"
@using CoinVotesWeb.Components.Layout
@layout DashboardLayout
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Devices - Dashboard</PageTitle>

<div class="card bg-dark text-light">
    <div class="card-header bg-dark border-secondary">
        <div class="d-flex justify-content-between align-items-center">
            <h3 class="card-title text-light mb-0">Devices Management</h3>
            <div class="input-group" style="width: 300px;">
                <input type="text" id="searchInput" class="form-control bg-dark text-light border-secondary" placeholder="Search devices..." />
                <button class="btn btn-outline-secondary" type="button" id="searchButton">
                    <i class="bi bi-search">Search</i>
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-dark table-striped table-hover">
                <thead>
                <tr>
                    <th>ID</th>
                    <th>Device ID</th>
                    <th>Type</th>
                    <th>Model</th>
                    <th>User ID</th>
                    <th>OS Version</th>
                    <th>Language</th>
                    <th>Region</th>
                    <th>Notifications</th>
                    <th>Created At</th>
                    <th>Updated At</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody id="devicesTableBody">
                    <tr>
                        <td colspan="10" class="text-center">
                            <div class="spinner-border text-light" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div id="pagination" class="d-flex justify-content-center mt-3">
            <!-- Pagination will be rendered here by JavaScript -->
        </div>
    </div>
    <div class="card-footer bg-dark border-secondary">
        <button class="btn btn-success">Add New Device</button>
    </div>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeSearch");
            await JS.InvokeVoidAsync("loadDevices");
        }
    }
} 

<script>
    // Function to fetch devices with pagination and search
    async function fetchDevices(page, pageSize, searchTerm) {
        try {
            const url = new URL('/api/DevicesApi', window.location.origin);
            url.searchParams.append('page', page);
            url.searchParams.append('pageSize', pageSize);

            if (searchTerm) {
                url.searchParams.append('searchTerm', searchTerm);
            }

            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error fetching devices:', error);
            throw error;
        }
    }

    // Function to fetch a single device by ID
    async function fetchDeviceById(id) {
        try {
            const response = await fetch(`/api/DevicesApi/${id}`);
            if (!response.ok) {
                if (response.status === 404) {
                    return null;
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error fetching device:', error);
            throw error;
        }
    }

    // Function to render devices in a table
    function renderDevices(devices, containerId) {
        const container = document.getElementById(containerId);
        if (!container) return;

        if (!devices || devices.length === 0) {
            container.innerHTML = `
            <tr>
                <td colspan="7" class="text-center">No devices found</td>
            </tr>
        `;
            return;
        }

        let html = '';
        devices.forEach(device => {
            // Format dates
            const createdAt = new Date(device.createdAt);
            const updatedAt = new Date(device.updatedAt);
            const createDateStr = createdAt.toLocaleString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false
            });

            const updateDateStr = updatedAt.toLocaleString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false
            });

            html += `
            <tr>
                <td>${device.id}</td>
                <td>${device.deviceId}</td>
                <td>${device.deviceType}</td>
                <td>${device.deviceModel}</td>
                <td>${device.userId}</td>
                <td>${device.osVersion}</td>
                <td>${device.deviceLanguage.toLocaleUpperCase()}</td>
                <td>${device.deviceRegion.toLocaleUpperCase()}</td>
                <td>
                    <span class="badge ${device.isNotificationPermissionGiven ? 'bg-success' : 'bg-warning'}">
                        ${device.isNotificationPermissionGiven ? 'Enabled' : 'Disabled'}
                    </span>
                </td>
                <td>${createDateStr}</td>
                <td>${updateDateStr}</td>
                <td>
                    <button class="btn btn-sm btn-primary">Edit</button>
                    <button class="btn btn-sm btn-danger">Remove</button>
                </td>
            </tr>
        `;
        });

        container.innerHTML = html;
    }

    // Function to render pagination controls
    function renderPagination(currentPage, totalPages, containerId, onPageChange) {
        const container = document.getElementById(containerId);
        if (!container) return;

        if (totalPages <= 1) {
            container.innerHTML = '';
            return;
        }

        let html = `
        <nav aria-label="Page navigation">
            <ul class="pagination pagination-dark">
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link bg-dark text-light border-secondary" href="#" aria-label="Previous" ${currentPage === 1 ? 'tabindex="-1"' : ''}>
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
    `;

        // Calculate range of page numbers to show
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, startPage + 4);

        // Adjust start if we're near the end
        if (endPage - startPage < 4) {
            startPage = Math.max(1, endPage - 4);
        }

        // First page
        if (startPage > 1) {
            html += `
            <li class="page-item">
                <a class="page-link bg-dark text-light border-secondary" href="#" data-page="1">1</a>
            </li>
        `;
            if (startPage > 2) {
                html += `
                <li class="page-item disabled">
                    <span class="page-link bg-dark text-light border-secondary">...</span>
                </li>
            `;
            }
        }

        // Page numbers
        for (let i = startPage; i <= endPage; i++) {
            html += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link ${i === currentPage ? 'bg-primary border-primary' : 'bg-dark text-light border-secondary'}" href="#" data-page="${i}">${i}</a>
            </li>
        `;
        }

        // Last page
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                html += `
                <li class="page-item disabled">
                    <span class="page-link bg-dark text-light border-secondary">...</span>
                </li>
            `;
            }
            html += `
            <li class="page-item">
                <a class="page-link bg-dark text-light border-secondary" href="#" data-page="${totalPages}">${totalPages}</a>
            </li>
        `;
        }

        html += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link bg-dark text-light border-secondary" href="#" aria-label="Next" ${currentPage === totalPages ? 'tabindex="-1"' : ''}>
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    `;

        container.innerHTML = html;

        // Add event listeners
        const pageLinks = container.querySelectorAll('.page-link[data-page]');
        pageLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = parseInt(e.target.getAttribute('data-page'));
                onPageChange(page);
            });
        });

        // Previous button
        const prevButton = container.querySelector('.page-item:first-child .page-link');
        if (prevButton && currentPage > 1) {
            prevButton.addEventListener('click', (e) => {
                e.preventDefault();
                onPageChange(currentPage - 1);
            });
        }

        // Next button
        const nextButton = container.querySelector('.page-item:last-child .page-link');
        if (nextButton && currentPage < totalPages) {
            nextButton.addEventListener('click', (e) => {
                e.preventDefault();
                onPageChange(currentPage + 1);
            });
        }
    }

    // Main function to load devices
    async function loadDevices(page = 1, pageSize = 50, searchTerm = '') {
        try {
            const data = await fetchDevices(page, pageSize, searchTerm);
            renderDevices(data.items, 'devicesTableBody');
            renderPagination(data.currentPage, data.totalPages, 'pagination', (newPage) => {
                loadDevices(newPage, pageSize, searchTerm);
            });
        } catch (error) {
            console.error('Error loading devices:', error);
            const container = document.getElementById('devicesTableBody');
            if (container) {
                container.innerHTML = `
                <tr>
                    <td colspan="9" class="text-center text-danger">
                        Error loading devices. Please try again later.
                    </td>
                </tr>
            `;
            }
        }
    }

    // Function to initialize search functionality
    function initializeSearch() {
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');

        if (!searchInput || !searchButton) return;

        // Search on button click
        searchButton.addEventListener('click', () => {
            const searchTerm = searchInput.value.trim();
            loadDevices(1, 10, searchTerm);
        });

        // Search on Enter key
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const searchTerm = searchInput.value.trim();
                loadDevices(1, 10, searchTerm);
            }
        });
    }

    // Make the loadDevices function available globally
    window.loadDevices = loadDevices;
    window.initializeSearch = initializeSearch;
</script>