# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy Next.js

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event for the master branch
  push:    
    branches: [master]

jobs:

  deploy:
   # Our previously created self-hosted runner
    runs-on: self-hosted

    env:
      NEXT_TELEMETRY_DISABLED: 1
      NODE_ENV: production
      DISABLE_ESLINT_PLUGIN: true
      ESLINT_NO_DEV_ERRORS: true

     # A sequence of tasks that will execute as part of the job
    steps:
      # Checks out repository so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Clean install
        run: |
          echo "Cleaning previous installations..."
          rm -rf node_modules
          rm -f package-lock.json
          
      - name: Create necessary directories
        run: |
          mkdir -p src/styles
          
      - name: Setup CSS configuration
        run: |
          # Create base CSS file
          echo '@tailwind base;
          @tailwind components;
          @tailwind utilities;' > src/styles/globals.css
          
          # Create PostCSS config
          echo '{
            "plugins": {
              "tailwindcss": {},
              "autoprefixer": {}
            }
          }' > postcss.config.json
          
          # Create Tailwind config
          echo 'module.exports = {
            content: [
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }' > tailwind.config.js
          
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          # Install Next.js and React
          npm install next@latest react@latest react-dom@latest
          
          # Install Tailwind CSS and its dependencies
          npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
          
          # Install additional Tailwind plugins
          npm install -D @tailwindcss/typography @tailwindcss/forms @tailwindcss/aspect-ratio
          
          # Install UI dependencies
          npm install @radix-ui/react-slot lucide-react clsx class-variance-authority tailwind-merge
          
          # Verify installations
          echo "Verifying installations..."
          npm list tailwindcss
          npm list postcss
          npm list autoprefixer
          
      - name: Initialize Tailwind
        run: |
          echo "Initializing Tailwind..."
          npx tailwindcss init -p
          
      - name: Build application
        run: |
          echo "Starting build process..."
          # Create next.config.js
          echo 'const path = require("path");
          
          /** @type {import("next").NextConfig} */
          const nextConfig = {
            eslint: {
              ignoreDuringBuilds: true,
            },
            webpack: (config) => {
              config.resolve.alias = {
                ...config.resolve.alias,
                "@": path.join(__dirname, "src"),
              };
              return config;
            },
          };
          
          module.exports = nextConfig;' > next.config.js
          
          # Run build
          npm run build --no-lint
          
      - name: Setup PM2 if not exists
        run: |
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          
      - name: Deploy with PM2
        run: |
          if pm2 list | grep -q "coininsightweb"; then
            pm2 reload coininsightweb --update-env
          else
            pm2 start npm --name "coininsightweb" -- start
          fi
          pm2 save
          
      - name: Configure nginx
        run: |
          if [ ! -f /etc/nginx/sites-available/coinvotesweb ]; then
            sudo cp nginx_default.conf /etc/nginx/sites-available/coinvotesweb
            sudo ln -s /etc/nginx/sites-available/coinvotesweb /etc/nginx/sites-enabled/
          fi
          sudo nginx -t && sudo systemctl reload nginx
          
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10
          if curl -f http://localhost:5005 &>/dev/null; then
            echo "✅ Application is running"
          else
            echo "❌ Application failed to start"
            pm2 logs coininsightweb --lines 50
            exit 1
          fi
          
      - name: Cleanup
        if: always()
        run: |
          rm -rf .next/cache
          npm cache clean --force
