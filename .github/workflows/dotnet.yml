# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy Next.js

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event for the master branch
  push:    
    branches: [master]

jobs:

  deploy:
   # Our previously created self-hosted runner
    runs-on: self-hosted

    env:
      NEXT_TELEMETRY_DISABLED: 1
      NODE_ENV: production
      DISABLE_ESLINT_PLUGIN: true
      ESLINT_NO_DEV_ERRORS: true

     # A sequence of tasks that will execute as part of the job
    steps:
      # Checks out repository so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-
            
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          # Create package.json if it doesn't exist
          if [ ! -f package.json ]; then
            echo '{
              "name": "coinvotesweb",
              "version": "0.1.0",
              "private": true,
              "scripts": {
                "dev": "next dev",
                "build": "next build",
                "start": "next start",
                "lint": "next lint"
              },
              "dependencies": {
                "next": "^15.2.3",
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "@radix-ui/react-slot": "^1.0.2",
                "lucide-react": "^0.294.0",
                "clsx": "^2.0.0",
                "class-variance-authority": "^0.7.0",
                "tailwind-merge": "^2.0.0"
              },
              "devDependencies": {
                "tailwindcss": "3.3.0",
                "postcss": "8.4.31",
                "autoprefixer": "10.4.16",
                "@tailwindcss/typography": "0.5.10",
                "@tailwindcss/forms": "0.5.7",
                "@tailwindcss/aspect-ratio": "0.4.2"
              }
            }' > package.json
          fi
          
          if [ ! -f "node_modules/.package-lock.json" ]; then
            echo "Clean installing dependencies..."
            rm -rf node_modules package-lock.json
            npm cache clean --force
            npm install --no-audit --no-fund --no-optional
          fi
          
          # Verify package installation
          if [ ! -d "node_modules/tailwindcss" ]; then
            echo "Installing Tailwind CSS and related packages..."
            npm install -D tailwindcss@3.3.0 postcss@8.4.31 autoprefixer@10.4.16 --no-audit --no-fund
          fi
          
          # Create necessary config files
          echo "/** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
              './src/components/**/*.{js,ts,jsx,tsx,mdx}',
              './src/app/**/*.{js,ts,jsx,tsx,mdx}',
            ],
            theme: {
              extend: {},
            },
            plugins: [
              require('@tailwindcss/typography'),
              require('@tailwindcss/forms'),
              require('@tailwindcss/aspect-ratio'),
            ],
          }" > tailwind.config.js
          
          echo "module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }" > postcss.config.js
          
          # Setup Next.js app structure
          mkdir -p src/app
          
          # Create globals.css if it doesn't exist
          if [ ! -f src/app/globals.css ]; then
            echo "@tailwind base;
            @tailwind components;
            @tailwind utilities;" > src/app/globals.css
          fi
          
          # Create root layout if it doesn't exist
          if [ ! -f src/app/layout.tsx ]; then
            echo "import './globals.css'
            
            export const metadata = {
              title: 'CoinVotes',
              description: 'Cryptocurrency Voting Platform',
            }
            
            export default function RootLayout({
              children,
            }: {
              children: React.ReactNode
            }) {
              return (
                <html lang=\"en\">
                  <body>{children}</body>
                </html>
              )
            }" > src/app/layout.tsx
          fi
          
          # Verify final installation
          if [ -f "node_modules/tailwindcss/package.json" ]; then
            echo "✅ Tailwind CSS is installed correctly"
            npm list tailwindcss postcss autoprefixer
          else
            echo "❌ Tailwind CSS installation failed"
            exit 1
          fi
          
      - name: Build application
        run: |
          echo "Starting build process..."
          npm run build --no-lint
          
      - name: Setup PM2 if not exists
        run: |
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          
      - name: Deploy with PM2
        run: |
          if pm2 list | grep -q "coininsightweb"; then
            pm2 reload coininsightweb --update-env
          else
            pm2 start npm --name "coininsightweb" -- start
          fi
          pm2 save
          
      - name: Configure nginx
        run: |
          if [ ! -f /etc/nginx/sites-available/coinvotesweb ]; then
            sudo cp nginx_default.conf /etc/nginx/sites-available/coinvotesweb
            sudo ln -s /etc/nginx/sites-available/coinvotesweb /etc/nginx/sites-enabled/
          fi
          sudo nginx -t && sudo systemctl reload nginx
          
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10
          if curl -f http://localhost:5005 &>/dev/null; then
            echo "✅ Application is running"
          else
            echo "❌ Application failed to start"
            pm2 logs coininsightweb --lines 50
            exit 1
          fi
          
      - name: Cleanup
        if: always()
        run: |
          rm -rf .next/cache
          npm cache clean --force
