# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy Next.js

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event for the master branch
  push:    
    branches: [master]

jobs:

  deploy:
   # Our previously created self-hosted runner
    runs-on: self-hosted

    env:
      NEXT_TELEMETRY_DISABLED: 1
      NODE_ENV: production
      DISABLE_ESLINT_PLUGIN: true
      ESLINT_NO_DEV_ERRORS: true

     # A sequence of tasks that will execute as part of the job
    steps:
      # Checks out repository so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Clean install
        working-directory: CoinVotesWeb
        run: |
          # Remove existing modules and lock files
          rm -rf node_modules
          rm -f package-lock.json
          
      - name: Install dependencies
        working-directory: CoinVotesWeb
        run: |
          # Install base dependencies
          npm install
          
          # Install PostCSS and its plugins
          npm install -D postcss postcss-preset-env
          
          # Install Tailwind and its plugins
          npm install -D tailwindcss@latest autoprefixer@latest
          npm install -D @tailwindcss/typography @tailwindcss/forms @tailwindcss/aspect-ratio
          
          # Install shadcn/ui dependencies
          npm install @radix-ui/react-slot lucide-react clsx class-variance-authority tailwind-merge
          
      - name: Build application
        working-directory: CoinVotesWeb
        run: |
          # Ensure proper Next.js configuration
          echo 'const path = require("path");

          /** @type {import("next").NextConfig} */
          const nextConfig = {
            eslint: {
              ignoreDuringBuilds: true,
            },
            webpack: (config) => {
              config.resolve.alias = {
                ...config.resolve.alias,
                "@": path.join(__dirname, "src"),
              };
              return config;
            },
          };
          
          module.exports = nextConfig;' > next.config.js
          
          # Generate Tailwind config
          echo '/** @type {import("tailwindcss").Config} */
          module.exports = {
            darkMode: ["class"],
            content: [
              "./src/**/*.{ts,tsx}",
            ],
            theme: {
              extend: {},
            },
            plugins: [
              require("@tailwindcss/typography"),
              require("@tailwindcss/forms"),
              require("@tailwindcss/aspect-ratio"),
            ],
          }' > tailwind.config.js
          
          # Generate PostCSS config
          echo 'module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
              "postcss-preset-env": {},
            },
          }' > postcss.config.js
          
          # Create tsconfig paths
          echo '{
            "compilerOptions": {
              "baseUrl": ".",
              "paths": {
                "@/*": ["./src/*"]
              }
            }
          }' > tsconfig.json
          
          # Run the build
          npm run build --no-lint
          
      - name: Setup PM2 if not exists
        run: |
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          
      - name: Deploy with PM2
        working-directory: CoinVotesWeb
        run: |
          if pm2 list | grep -q "coininsightweb"; then
            # Perform zero-downtime reload if process exists
            pm2 reload coininsightweb --update-env
          else
            # Start new process if it doesn't exist
            pm2 start npm --name "coininsightweb" -- start
          fi
          pm2 save
          
      - name: Configure nginx
        run: |
          if [ ! -f /etc/nginx/sites-available/coinvotesweb ]; then
            sudo cp nginx_default.conf /etc/nginx/sites-available/coinvotesweb
            sudo ln -s /etc/nginx/sites-available/coinvotesweb /etc/nginx/sites-enabled/
          fi
          sudo nginx -t && sudo systemctl reload nginx
          
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10
          if curl -f http://localhost:5005 &>/dev/null; then
            echo "✅ Application is running"
          else
            echo "❌ Application failed to start"
            pm2 logs coininsightweb --lines 50
            exit 1
          fi
          
      - name: Cleanup
        if: always()
        run: |
          rm -rf .next/cache
          npm cache clean --force
