# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy Next.js

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event for the master branch
  push:    
    branches: [master]

jobs:

  deploy:
   # Our previously created self-hosted runner
    runs-on: self-hosted

    env:
      NEXT_TELEMETRY_DISABLED: 1
      NODE_ENV: production
      DISABLE_ESLINT_PLUGIN: true
      ESLINT_NO_DEV_ERRORS: true

     # A sequence of tasks that will execute as part of the job
    steps:
      # Checks out repository so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Clean install
        run: |
          echo "Cleaning previous installations..."
          rm -rf node_modules
          rm -f package-lock.json
          
      - name: Create necessary directories
        run: |
          mkdir -p src/styles
          
      - name: Setup CSS configuration
        run: |
          # Create base CSS file
          echo '@tailwind base;
          @tailwind components;
          @tailwind utilities;' > src/styles/globals.css
          
          # Create PostCSS config
          echo '{
            "plugins": {
              "tailwindcss": {},
              "autoprefixer": {}
            }
          }' > postcss.config.json
          
          # Create Tailwind config
          echo 'module.exports = {
            content: [
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }' > tailwind.config.js
          
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          # Create package.json if it doesn't exist
          if [ ! -f package.json ]; then
            echo '{
              "name": "coinvotesweb",
              "version": "0.1.0",
              "private": true,
              "scripts": {
                "dev": "next dev",
                "build": "next build",
                "start": "next start",
                "lint": "next lint"
              },
              "dependencies": {
                "next": "^15.2.3",
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "@radix-ui/react-slot": "^1.0.2",
                "lucide-react": "^0.294.0",
                "clsx": "^2.0.0",
                "class-variance-authority": "^0.7.0",
                "tailwind-merge": "^2.0.0"
              },
              "devDependencies": {
                "tailwindcss": "^3.3.0",
                "postcss": "^8.4.31",
                "autoprefixer": "^10.4.16",
                "@tailwindcss/typography": "^0.5.10",
                "@tailwindcss/forms": "^0.5.7",
                "@tailwindcss/aspect-ratio": "^0.4.2"
              }
            }' > package.json
          fi
          
          # Clean install
          echo "Performing clean install..."
          rm -rf node_modules package-lock.json
          npm cache clean --force
          
          # Install all dependencies
          npm install
          
          # Run security fixes and audit
          echo "Running security fixes..."
          npm audit fix
          
          # Final security audit
          echo "Running final security audit..."
          if ! npm audit; then
            echo "Warning: Security vulnerabilities found. Please review the audit report."
          fi
          
          # Verify critical dependencies
          echo "Verifying critical dependencies..."
          MISSING_DEPS=()
          
          # Check Next.js (could be in next or @next)
          if [ ! -d "node_modules/next" ] && [ ! -d "node_modules/@next" ]; then
            MISSING_DEPS+=("Next.js")
          fi
          
          # Check React
          if [ ! -d "node_modules/react" ]; then
            MISSING_DEPS+=("React")
          fi
          
          # Check Tailwind (in @tailwindcss)
          if [ ! -d "node_modules/@tailwindcss" ]; then
            MISSING_DEPS+=("Tailwind CSS")
          fi
          
          # Report missing dependencies
          if [ ${#MISSING_DEPS[@]} -ne 0 ]; then
            echo "The following critical dependencies are missing:"
            printf '%s\n' "${MISSING_DEPS[@]}"
            echo "Installed packages in node_modules:"
            ls -la node_modules
            exit 1
          fi
          
          echo "All critical dependencies are present"
          
          # Show installed versions
          echo "Installed versions:"
          npm list next react @tailwindcss/postcss7-compat tailwindcss postcss autoprefixer
          
          # Verify the installation was successful
          if [ $? -eq 0 ]; then
            echo "✅ Dependencies verified successfully"
          else
            echo "⚠️ Some dependencies might have warnings, but they are installed"
          fi
          
      - name: Initialize Tailwind
        run: |
          echo "Initializing Tailwind..."
          # Create Tailwind config if it doesn't exist
          if [ ! -f tailwind.config.js ]; then
            echo "/** @type {import('tailwindcss').Config} */
            module.exports = {
              content: [
                './src/**/*.{js,ts,jsx,tsx,mdx}',
                './components/**/*.{js,ts,jsx,tsx,mdx}',
              ],
              theme: {
                extend: {},
              },
              plugins: [
                require('@tailwindcss/typography'),
                require('@tailwindcss/forms'),
                require('@tailwindcss/aspect-ratio'),
              ],
            }" > tailwind.config.js
          fi

          # Create PostCSS config if it doesn't exist
          if [ ! -f postcss.config.js ]; then
            echo "module.exports = {
              plugins: {
                tailwindcss: {},
                autoprefixer: {},
              },
            }" > postcss.config.js
          fi

          # Create or update CSS file
          mkdir -p src/styles
          echo "@tailwind base;
          @tailwind components;
          @tailwind utilities;" > src/styles/globals.css

          echo "✅ Tailwind initialization completed"
          
      - name: Build application
        run: |
          echo "Starting build process..."
          # Create next.config.js with security headers
          echo 'const path = require("path");
          
          /** @type {import("next").NextConfig} */
          const nextConfig = {
            eslint: {
              ignoreDuringBuilds: true,
            },
            poweredByHeader: false,
            async headers() {
              return [
                {
                  source: "/:path*",
                  headers: [
                    {
                      key: "X-Frame-Options",
                      value: "DENY",
                    },
                    {
                      key: "X-Content-Type-Options",
                      value: "nosniff",
                    },
                    {
                      key: "Referrer-Policy",
                      value: "strict-origin-when-cross-origin",
                    },
                    {
                      key: "X-XSS-Protection",
                      value: "1; mode=block",
                    },
                  ],
                },
              ];
            },
            webpack: (config) => {
              config.resolve.alias = {
                ...config.resolve.alias,
                "@": path.join(__dirname, "src"),
              };
              return config;
            },
          };
          
          module.exports = nextConfig;' > next.config.js
          
          # Run build
          npm run build --no-lint
          
      - name: Setup PM2 if not exists
        run: |
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi
          
      - name: Deploy with PM2
        run: |
          if pm2 list | grep -q "coininsightweb"; then
            pm2 reload coininsightweb --update-env
          else
            pm2 start npm --name "coininsightweb" -- start
          fi
          pm2 save
          
      - name: Configure nginx
        run: |
          if [ ! -f /etc/nginx/sites-available/coinvotesweb ]; then
            sudo cp nginx_default.conf /etc/nginx/sites-available/coinvotesweb
            sudo ln -s /etc/nginx/sites-available/coinvotesweb /etc/nginx/sites-enabled/
          fi
          sudo nginx -t && sudo systemctl reload nginx
          
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10
          if curl -f http://localhost:5005 &>/dev/null; then
            echo "✅ Application is running"
          else
            echo "❌ Application failed to start"
            pm2 logs coininsightweb --lines 50
            exit 1
          fi
          
      - name: Cleanup
        if: always()
        run: |
          rm -rf .next/cache
          npm cache clean --force
